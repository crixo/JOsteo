/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportView.java
 *
 * Created on Nov 25, 2010, 8:49:31 AM
 */

package josteo.views;
import java.text.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.util.*;
import java.io.*;
import java.util.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.apache.commons.io.*;

import josteo.infrastructure.UI.*;
import josteo.infrastructure.helpers.*;
import org.xml.sax.SAXException;

/**
 *
 * @author cristiano
 */
public class ImportView extends ViewBase implements josteo.infrastructure.UI.IView {


   String _choosertitle;
   String _selectedFolder;
   java.util.List<String> _files2Import;
   Map<String, String[]> _tabFiels;

    /** Creates new form ImportView */
    public ImportView() {
        initComponents();

        this.btnSelectFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFolderActionPerformed(evt);
            }
        });

        this.btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });
        

        _tabFiels = new HashMap<String, String[]>();
        _tabFiels.put("anamnesi_prossima", new String[]{"ID_consulto","prima_volta","tipologia","localizzazione","irradiazione","periodo_insorgenza","durata","familiarita","altre_terapie","varie"});
        _tabFiels.put("anamnesi_remota", new String[]{"ID","data","tipo","descrizione"});
        _tabFiels.put("consulto", new String[]{"ID","data","problema_iniziale"});
        _tabFiels.put("esame", new String[]{"ID","ID_consulto","data","descrizione"});
        _tabFiels.put("lkp_anamnesi", new String[]{"ID","descrizione"});
        _tabFiels.put("lkp_esame", new String[]{"ID","descrizione"});
        _tabFiels.put("lkp_provincia", new String[]{"sigla","descrizione"});
        _tabFiels.put("paziente", new String[]{"ID","cognome","nome","data_nascita","professione","indirizzo","citta","telefono","cellulare","prov","cap"});
        _tabFiels.put("trattamento", new String[]{"ID","ID_consulto","data","descrizione"});
        _tabFiels.put("valutazione", new String[]{"ID","ID_consulto","strutturale","cranio_sacrale","ak_ortodontica"});
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSelectFolder = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstXmlFile = new javax.swing.JList();
        btnImport = new javax.swing.JButton();

        btnSelectFolder.setText("Select Folder with xml dumps");

        lstXmlFile.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstXmlFile);

        btnImport.setText("Create Import Script");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(btnSelectFolder))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(btnImport))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 452, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(350, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(btnSelectFolder)
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 189, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(btnImport)
                .addContainerGap(171, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnSelectFolder;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstXmlFile;
    // End of variables declaration//GEN-END:variables

    public void Init(){
        this.lstXmlFile.setVisible(false);
        this.btnImport.setVisible(false);
        this._files2Import = new ArrayList<String>();
    }

  public void btnSelectFolderActionPerformed(ActionEvent e) {
    int result;
    this._files2Import.clear();

    JFileChooser chooser = new JFileChooser();
    chooser.setCurrentDirectory(new java.io.File("."));
    chooser.setDialogTitle(_choosertitle);
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    //
    // disable the "All files" option.
    //
    chooser.setAcceptAllFileFilterUsed(false);
    //
    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        _selectedFolder = chooser.getSelectedFile().getAbsolutePath();
        fillList();
      System.out.println("getCurrentDirectory(): "
         +  chooser.getCurrentDirectory());
      System.out.println("getSelectedFile() : "
         +  chooser.getSelectedFile());
      }
    else {
      System.out.println("No Selection ");
      }
    }

  public void btnImportActionPerformed(ActionEvent e) {

      this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

      String msg = "";
      try{
        msg = "sql import file created successfully at " + createImportFile();
      }catch(Exception exc){
        ConfigHelper.getInstance().WriteLog(exc);
        msg = "An error occurred creating import script: \n" + exc.getMessage();
      }finally{      
        JOptionPane.showMessageDialog(this, msg);
      }
      this.setCursor(Cursor.getDefaultCursor());


  }
  
  private String createImportFile() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, java.text.ParseException{

    String importFileName = String.format("import_%1$tY-%1$tm-%1$td-%1$tH-%1$tM-%1$tS.sql", Calendar.getInstance());
    String importFilePath = FilenameUtils.concat(_selectedFolder, importFileName);
    PrintWriter pw = new PrintWriter(new FileWriter(importFilePath));
    for(String fileName : this._files2Import){
        //try {
          File file = new File(FilenameUtils.concat(_selectedFolder, fileName));
          DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
          DocumentBuilder db = dbf.newDocumentBuilder();
          Document doc = db.parse(file);
          doc.getDocumentElement().normalize();
          System.out.println("Root element " + doc.getDocumentElement().getNodeName());
          String tabName = FilenameUtils.removeExtension(fileName);
          NodeList nodeLst = doc.getElementsByTagName(tabName);
          
          
          createInsert(pw, nodeLst, ((String[])this._tabFiels.get(tabName)), tabName);
            
        //}catch(Exception exc){


        //}
    }
    
    pw.close();
    return importFilePath;
  }


  public void fillList(){
      // Directory path here
      String path = this._selectedFolder;

      String files;
      File folder = new File(path);
      File[] listOfFiles = folder.listFiles();

      for (int i = 0; i < listOfFiles.length; i++){

       if (listOfFiles[i].isFile()){
       files = listOfFiles[i].getName();
           if (files.endsWith(".xml") || files.endsWith(".XML")){
              System.out.println(files);
              this._files2Import.add(files);
            }
         }
      }
      java.util.List<String> missingFiles = new ArrayList<String>();
      for(Map.Entry<String,String[]> entry : this._tabFiels.entrySet()){
        if(!this._files2Import.contains(entry.getKey()+".xml")){
            missingFiles.add(entry.getKey());
        }
      }
      
      if(missingFiles.isEmpty()){
        showImport();
      } else
        showMissingFiles(missingFiles);          
  }

  private void showImport(){
    this.lstXmlFile.setListData(this._files2Import.toArray());
    this.btnImport.setVisible(true);
    this.lstXmlFile.setVisible(true);
  }
  
  private void showMissingFiles(java.util.List<String> missingFiles){
    String msg = "Due missing file(s) import cannot be executed:\n" + StringHelper.join(missingFiles,"\n");
    JOptionPane.showMessageDialog(this, msg);
  }

  private void createInsert(PrintWriter pw, NodeList nodeLst, String[] fields, String tabName)  throws java.text.ParseException{
    //String[] fields = new String[]{"ID","cognome","nome","data_nascita","professione","indirizzo","citta","telefono","cellulare","prov","cap"};
    Map<String,String> dic;
    
      
    //String s = "INSERT INTO paziente () VALUES ()";
    
    pw.println( String.format("-- %1$s", tabName) );

    DateFormat df;
    for (int s = 0; s < nodeLst.getLength(); s++) {
        dic = new HashMap<String,String>();
        Node fstNode = nodeLst.item(s);
        String value;
        if (fstNode.getNodeType() == Node.ELEMENT_NODE) {
          Element fstElmnt = (Element) fstNode;
          for(String field : fields){
              NodeList fstNmElmntLst = fstElmnt.getElementsByTagName(field);

              Element fstNmElmnt = (Element) fstNmElmntLst.item(0);
              NodeList fstNm = fstNmElmnt.getChildNodes();
              if(fstNm.getLength()>0){
                    value = ((Node) fstNm.item(0)).getNodeValue();

                  if(field.indexOf("data")>-1){
                    df = new SimpleDateFormat("yyyy-MM-dd");
                    value = df.format(df.parse(value));
                  }
              }else{
                value = "";
              }

              value = String.format("'%1$s'",value.replaceAll("'", "\\\\'"));

              dic.put(field, value);
          }
            
          pw.println( String.format("INSERT INTO %1$s (%2$s) VALUES (%3$s);", tabName, StringHelper.join(Arrays.asList(fields),","), StringHelper.join(dic.values(),",")) );
        }

    }
  }



}
