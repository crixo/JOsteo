/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ValutazioniPanel.java
 *
 * Created on Nov 9, 2010, 11:10:59 PM
 */

package josteo.views;

import josteo.infrastructure.UI.PanelListBase;
import java.util.*;
import javax.swing.event.*;
import ca.odell.glazedlists.swing.*;
import ca.odell.glazedlists.*;
import ca.odell.glazedlists.gui.*;

import josteo.viewmodels.*;
import josteo.model.paziente.*;
import josteo.application.*;
import josteo.infrastructure.helpers.*;
import josteo.infrastructure.DomainBase.*;
import josteo.infrastructure.UI.*;
import josteo.views.UI.ValutazioneAdvancedTableFormat;

import org.jdesktop.swingbinding.*;
import org.jdesktop.beansbinding.*;
import org.jdesktop.swingbinding.SwingBindings;
import javax.swing.*;
import java.awt.event.*;
import josteo.model.tipoAnamnesi.TipoAnamnesi;
import josteo.model.tipoEsame.TipoEsame;

/**
 *
 * @author cristiano
 */
public class ValutazioniPanel extends PanelListBase<Valutazione> implements IConsultoSelectedListner {

    /** Creates new form ValutazioniPanel */
    public ValutazioniPanel() {
        super();
        initComponents();

        this._presenter = new josteo.viewmodels.ValutazioniPresenter();

        ApplicationState.getInstance().addConsultoSelectedListener(this);

        this.jTable1.setRowHeight(32);

        this.taStrutturale.getDocument().addDocumentListener(new UpdateListener());
        this.taCranioSacrale.getDocument().addDocumentListener(new UpdateListener());
        this.taAkOrtodontica.getDocument().addDocumentListener(new UpdateListener());

        this._isDirty = false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnEditing = new javax.swing.JPanel();
        pnCranioSacrale = new javax.swing.JPanel();
        lblCranioSacrale = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taCranioSacrale = new javax.swing.JTextArea();
        pnAkOrtodontica = new javax.swing.JPanel();
        lblAkOrtodontica = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taAkOrtodontica = new javax.swing.JTextArea();
        pnSubmit = new javax.swing.JPanel();
        btnReset = new javax.swing.JButton();
        btnStore = new javax.swing.JButton();
        pnStrutturale = new javax.swing.JPanel();
        lblStrutturale = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taStrutturale = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        pnEditing.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Valutazione", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 2, 13))); // NOI18N

        lblCranioSacrale.setText("Cranio Sacrale");

        taCranioSacrale.setColumns(20);
        taCranioSacrale.setRows(5);
        jScrollPane2.setViewportView(taCranioSacrale);

        org.jdesktop.layout.GroupLayout pnCranioSacraleLayout = new org.jdesktop.layout.GroupLayout(pnCranioSacrale);
        pnCranioSacrale.setLayout(pnCranioSacraleLayout);
        pnCranioSacraleLayout.setHorizontalGroup(
            pnCranioSacraleLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnCranioSacraleLayout.createSequentialGroup()
                .add(lblCranioSacrale)
                .addContainerGap(314, Short.MAX_VALUE))
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
        );
        pnCranioSacraleLayout.setVerticalGroup(
            pnCranioSacraleLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnCranioSacraleLayout.createSequentialGroup()
                .add(lblCranioSacrale)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 0, Short.MAX_VALUE)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        lblAkOrtodontica.setText("Ak Ortodontica");

        taAkOrtodontica.setColumns(20);
        taAkOrtodontica.setRows(5);
        jScrollPane3.setViewportView(taAkOrtodontica);

        org.jdesktop.layout.GroupLayout pnAkOrtodonticaLayout = new org.jdesktop.layout.GroupLayout(pnAkOrtodontica);
        pnAkOrtodontica.setLayout(pnAkOrtodonticaLayout);
        pnAkOrtodonticaLayout.setHorizontalGroup(
            pnAkOrtodonticaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnAkOrtodonticaLayout.createSequentialGroup()
                .add(lblAkOrtodontica)
                .addContainerGap(307, Short.MAX_VALUE))
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
        );
        pnAkOrtodonticaLayout.setVerticalGroup(
            pnAkOrtodonticaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnAkOrtodonticaLayout.createSequentialGroup()
                .add(lblAkOrtodontica)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 0, Short.MAX_VALUE)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0))
        );

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnStore.setText("Store");
        btnStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStoreActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnSubmitLayout = new org.jdesktop.layout.GroupLayout(pnSubmit);
        pnSubmit.setLayout(pnSubmitLayout);
        pnSubmitLayout.setHorizontalGroup(
            pnSubmitLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnSubmitLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(btnReset)
                .add(65, 65, 65)
                .add(btnStore)
                .add(106, 106, 106))
        );
        pnSubmitLayout.setVerticalGroup(
            pnSubmitLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnSubmitLayout.createSequentialGroup()
                .add(0, 0, 0)
                .add(pnSubmitLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnStore)
                    .add(btnReset))
                .addContainerGap())
        );

        lblStrutturale.setText("Strutturale");

        taStrutturale.setColumns(20);
        taStrutturale.setRows(5);
        jScrollPane1.setViewportView(taStrutturale);

        org.jdesktop.layout.GroupLayout pnStrutturaleLayout = new org.jdesktop.layout.GroupLayout(pnStrutturale);
        pnStrutturale.setLayout(pnStrutturaleLayout);
        pnStrutturaleLayout.setHorizontalGroup(
            pnStrutturaleLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnStrutturaleLayout.createSequentialGroup()
                .add(lblStrutturale)
                .addContainerGap(337, Short.MAX_VALUE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
        );
        pnStrutturaleLayout.setVerticalGroup(
            pnStrutturaleLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnStrutturaleLayout.createSequentialGroup()
                .add(lblStrutturale)
                .add(0, 0, 0)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout pnEditingLayout = new org.jdesktop.layout.GroupLayout(pnEditing);
        pnEditing.setLayout(pnEditingLayout);
        pnEditingLayout.setHorizontalGroup(
            pnEditingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnEditingLayout.createSequentialGroup()
                .add(pnEditingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnEditingLayout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(pnStrutturale, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnEditingLayout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(pnEditingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, pnAkOrtodontica, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, pnCranioSacrale, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(pnEditingLayout.createSequentialGroup()
                        .add(87, 87, 87)
                        .add(pnSubmit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 246, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnEditingLayout.setVerticalGroup(
            pnEditingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnEditingLayout.createSequentialGroup()
                .add(pnStrutturale, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(pnCranioSacrale, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(pnAkOrtodontica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(pnSubmit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Strutturale", "Cranio-Sacrale", "Ak-Ortodontica"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 450, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnEditing, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnEditing, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 410, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        reset();
}//GEN-LAST:event_btnResetActionPerformed

    private void btnStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStoreActionPerformed
        // TODO add your handling code here:
        store();
}//GEN-LAST:event_btnStoreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnStore;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblAkOrtodontica;
    private javax.swing.JLabel lblCranioSacrale;
    private javax.swing.JLabel lblStrutturale;
    private javax.swing.JPanel pnAkOrtodontica;
    private javax.swing.JPanel pnCranioSacrale;
    private javax.swing.JPanel pnEditing;
    private javax.swing.JPanel pnStrutturale;
    private javax.swing.JPanel pnSubmit;
    private javax.swing.JTextArea taAkOrtodontica;
    private javax.swing.JTextArea taCranioSacrale;
    private javax.swing.JTextArea taStrutturale;
    // End of variables declaration//GEN-END:variables


   class ValutazioneComparator implements Comparator{
        public int compare(Object obj1, Object obj2){
            //parameter are of type Object, so we have to downcast it to Employee objects
            String dt1 = ( (Valutazione) obj1 ).get_Strutturale();
            String dt2 = ( (Valutazione) obj2 ).get_Strutturale();
            //uses compareTo method of String class to compare names of the employee
            return dt1.compareTo(dt2);
        }
    }

    public void ConsultoSelected( Consulto consulto ){
        System.out.println("ValutazioniPanel->ConsultoSelected consulto.Key: " + (consulto==null? "null" : consulto.get_Key().toString()));
        this.Init();
    }

    @Override
    public void Init(){
        this._items = new SortedList( this._presenter.getItems(), new ValutazioneComparator());
        gridConfig(new ValutazioneAdvancedTableFormat());

        this._presenter.Load();

        reset();
        
        this.addTabLisntener();
    }



    @Override
    protected JTable getTable(){
        return this.jTable1;
    }

    @Override
    protected void bindUI(){
        Valutazione item = this._presenter.getSelected();
        if(item==null)
            item = this._presenter.getNewItem();

        System.out.println("bindUI -> selItem:"+item.get_Key().toString());
        if(item==null) return;
        boolean bBind = true;
        if(this._isDirty){
            int i = JOptionPane.showConfirmDialog(null,"Vuoi sovrascrivere i dati nel form con la nuova selezione?","Dati non salvati", JOptionPane.YES_NO_OPTION);
            bBind = (i==0);
        }
        if(bBind){
            this.taStrutturale.setText((this._presenter.getSelected()!=null)? item.get_Strutturale() : "");
            this.taCranioSacrale.setText((this._presenter.getSelected()!=null)? item.get_CranioSacrale() : "");
            this.taAkOrtodontica.setText((this._presenter.getSelected()!=null)? item.get_AkOrtodontica() : "");

            this._isDirty = false;
            System.out.println("bindUI done");
        }

    }

    @Override
    protected boolean bindToPresenter(){
        Valutazione itemTmp = new Valutazione(0
                , this.taStrutturale.getText()
                , this.taCranioSacrale.getText()
                , this.taAkOrtodontica.getText());
        List<BrokenRule> brokenRules = itemTmp.GetBrokenRules();
        if(brokenRules.size()>0){
            List<String> errors = new ArrayList<String>();
            for(BrokenRule br : brokenRules)
                errors.add(br.get_Message());

            JOptionPane.showMessageDialog(this, josteo.infrastructure.helpers.StringHelper.join(errors,"\n"));
            return false;
        }


        Valutazione item = this._presenter.getSelected()==null? this._presenter.getNewItem() : this._presenter.getSelected();
        System.out.println("bindToPresenter:" + item.get_Key());
        item.set_Strutturale(itemTmp.get_Strutturale());
        item.set_CranioSacrale(itemTmp.get_CranioSacrale());
        item.set_AkOrtodontica(itemTmp.get_AkOrtodontica());
        return true;
    }
}
