/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PazientiPanel.java
 *
 * Created on Nov 11, 2010, 6:37:34 PM
 */

package josteo.views;

import josteo.views.UI.PazienteAdvancedTableFormat;
import josteo.infrastructure.UI.PanelBase;
import org.jdesktop.swingbinding.*;
import org.jdesktop.beansbinding.*;
import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import javax.swing.table.*;
import javax.swing.border.*;

import josteo.application.*;
import josteo.infrastructure.helpers.*;
import josteo.viewmodels.*;
import josteo.model.paziente.*;
import ca.odell.glazedlists.swing.*;
import ca.odell.glazedlists.*;
import ca.odell.glazedlists.event.ListEventListener;
import ca.odell.glazedlists.migrationkit.swing.TextFilterList;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.plaf.basic.BasicTreeUI.SelectionModelPropertyChangeHandler;

/**
 *
 * @author cristiano
 */
public class PazientiPanel extends PanelBase {
    josteo.viewmodels.HomePresenter _presenter;

    ArrayList _listeners;




    /** Creates new form PazientiPanel */
    public PazientiPanel() {
        initComponents();
        this._presenter = new HomePresenter();

        this.txtFilter.getDocument().addDocumentListener(new MyDocumentListener());

        this.jTable1.setRowHeight(32);
        

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtFilter = new javax.swing.JTextField();

        jTable1.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        txtFilter.setFont(new java.awt.Font("Lucida Grande", 2, 14)); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(txtFilter, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
            .add(jScrollPane1, 0, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(txtFilter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables

    public void Init(){

        final SortedList pazienti = new SortedList( this._presenter.get_Pazienti(), new NameComparator());
        gridConfig(this.jTable1, pazienti);

        TableColumn tcol = this.jTable1.getColumnModel().getColumn(0);
        tcol.setCellRenderer(new MyColumnTableCellRenderer()) ;
        
        tcol = this.jTable1.getColumnModel().getColumn(1);
        tcol.setCellRenderer(new MyColumnTableCellRenderer()) ;

        this.txtFilter.setToolTipText("type Cognome");

        this._presenter.LoadPazienti();

        this.txtFilter.setText("");

        this.jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
          public void valueChanged(ListSelectionEvent evt) {
              if (evt.getValueIsAdjusting()) return;
              PazientePresenter selP = null;
              Paziente paziente=null;
              try{
                //System.out.println("Selected from " + evt.getFirstIndex() + " to " + evt.getLastIndex());
                //ListSelectionModel lsm = (ListSelectionModel)evt.getSource();
                if(pazienti.size()>0 && PazientiPanel.this.jTable1.getSelectedRow()>-1){
                    selP = (PazientePresenter)pazienti.get(PazientiPanel.this.jTable1.getSelectedRow());
                    
                    System.out.println(selP.getFullName());

                    IPazienteService svc = (IPazienteService) ContainerHelper.getContainer().getBean("PazienteService");
                    paziente= svc.GetPaziente(selP.getKey());
                }

              }catch(Exception exc){
                ConfigHelper.getInstance().WriteLog(exc);
                
              }finally{
                  PazientiPanel.this._presenter.set_SelectedPaziente(selP);
                  ApplicationState.getInstance().setCurrentPaziente(paziente);
                
              }
          }
        });

        this.jTable1.addMouseListener(new java.awt.event.MouseAdapter(){
            public void mouseClicked(java.awt.event.MouseEvent e){
                if (e.getClickCount() == 2){
                    System.out.println(" double click -> selected is " + PazientiPanel.this._presenter.get_SelectedPaziente().getFullName() );
                    //showPaziente();
                }
            }
        });


        Paziente p = ApplicationState.getInstance().getCurrentPaziente();
        if(p!=null){
            for( int i=0;  i<pazienti.size(); i++ ){
                PazientePresenter pazienteP = (PazientePresenter)pazienti.get(i);
                if(pazienteP.getEntity().get_Key()==p.get_Key()){
                    this.jTable1.setRowSelectionInterval(i, i);
                    break;
                }
            }

        }
    }

    class NameComparator implements Comparator{
        public int compare(Object emp1, Object emp2){
            //parameter are of type Object, so we have to downcast it to Employee objects
            String emp1Name = ( (PazientePresenter) emp1 ).getFullName();
            String emp2Name = ( (PazientePresenter) emp2 ).getFullName();
            //uses compareTo method of String class to compare names of the employee
            return emp1Name.compareTo(emp2Name);
        }
    }

    class MyDocumentListener implements DocumentListener {
        String newline = "\n";

        public void insertUpdate(DocumentEvent e) {
            updateLog(e, "inserted into");
        }
        public void removeUpdate(DocumentEvent e) {
            updateLog(e, "removed from");
        }
        public void changedUpdate(DocumentEvent e) {
            //Plain text components do not fire these events
        }

        public void updateLog(DocumentEvent e, String action) {
            Document doc = (Document)e.getDocument();
            int changeLength = e.getLength();
            PazientiPanel.this._presenter.set_Filter(PazientiPanel.this.txtFilter.getText());
    //        displayArea.append(
    //            changeLength + " character" +
    //            ((changeLength == 1) ? " " : "s ") +
    //            action + doc.getProperty("name") + "." + newline +
    //            "  Text length = " + doc.getLength() + newline);
        }
    }


//    private void showPaziente(){
//        IPazienteService svc = (IPazienteService) ContainerHelper.getContainer().getBean("PazienteService");
//        ApplicationState.getInstance().setCurrentPaziente(svc.GetPaziente(PazientiPanel.this._presenter.get_SelectedPaziente().getEntity().get_Key()));
//
//
//        josteo.application.ApplicationState.getInstance().SwitchView("PazienteView");
//        josteo.application.ApplicationState.getInstance().SwitchView("ConsultiView");
//    }

    private <T> void gridConfig(final JTable tab, final SortedList<T> pazienti){
        //final SortedList<PazientePresenter> pazienti = new SortedList( this._presenter.get_Pazienti(), new NameComparator());

        //TextFilterList filteredCustomers = new TextFilterList(pazienti);
        //this.txtFilter = filteredCustomers.getFilterEdit();
        //filteredCustomers.setFilterEdit(this.jTextField1);

        PazienteAdvancedTableFormat tableFormat = new PazienteAdvancedTableFormat();
        //EventTableModel tableModel = new EventTableModel(filteredCustomers, tableFormat);
        //EventTableModel tableModel = new EventTableModel(filteredCustomers, tableFormat);
        EventTableModel tableModel = new EventTableModel(pazienti, tableFormat);
        EventSelectionModel selectionModel = new EventSelectionModel(pazienti);

        tab.setModel(tableModel);
        tab.setSelectionModel(selectionModel);

        TableComparatorChooser tableSorter = new TableComparatorChooser(tab, pazienti, false);
    }


  public class CustomTableCellRenderer extends DefaultTableCellRenderer{
    public Component getTableCellRendererComponent (JTable table,
Object obj, boolean isSelected, boolean hasFocus, int row, int column) {
      Component cell = super.getTableCellRendererComponent(
                         table, obj, isSelected, hasFocus, row, column);
      if (isSelected) {
        cell.setBackground(Color.green);
      }
      else {
        if (row % 2 == 0) {
          cell.setBackground(Color.cyan);
        }
        else {
          cell.setBackground(Color.lightGray);
        }
      }
      return cell;
    }
  }

public class MyColumnTableCellRenderer extends JLabel implements TableCellRenderer {

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, final int row, int column) {

               JLabel cellSpacingLabel= (JLabel) (this);

               /*
               if (hasFocus) {
                           setBorder(UIManager.getBorder("Table.focusCellHighlightBorder"));

                           cellSpacingLabel=null;
               }
               else{
                           setBackground(table.getBackground());

                           setBorder(null);


                }
                * 
                */

                if (isSelected) {
                        //cellSpacingLabel.setBackground(Color.green);

                       //setBackground(table.getSelectionBackground());
                        setBackground(Color.green);
                       setBorder(null);


               }
               else{

                       setBackground(table.getBackground());

                       setBorder(null);

                    if (row % 2 == 0) {
                      cellSpacingLabel.setBackground(Color.cyan);
                    }
                    else {
                      cellSpacingLabel.setBackground(Color.lightGray);
                    }


              }

                if (cellSpacingLabel != null) {
                          cellSpacingLabel.setBorder(new CompoundBorder(new EmptyBorder(new Insets(4, 8, 4, 8)), cellSpacingLabel.getBorder()));

                }


                this.setOpaque(true);
                setText((String) value);


                 return this;

        }



}
    /*
    private void bindPazienti(){
        EventList<PazientePresenter> list = this._presenter.get_Pazienti();
        JTable tab = this.jTable1;

        // create the binding from List to JTable
        JTableBinding tb = SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ, list, tab);

        // define the properties to be used for the columns
        BeanProperty fullNameP = BeanProperty.create("fullName");
        BeanProperty addressP = BeanProperty.create("fullAddress");
        //BeanProperty ageP = BeanProperty.create("age");

        // configure how the properties map to columns
        tb.addColumnBinding(fullNameP).setColumnName("Cognome, Nome");
        tb.addColumnBinding(addressP).setColumnName("Indirizzo");
        //tb.addColumnBinding(ageP).setColumnName("Age").setColumnClass(Integer.class);

        // realize the binding
        tb.bind();

        ELProperty elProperty = ELProperty.create("${selectedElement}");
        elProperty.addPropertyStateListener(tab, new PropertyStateListener() {
            public void propertyStateChanged(PropertyStateEvent arg0) {
                Object obj = arg0.getNewValue();
                if (obj instanceof PazientePresenter)
                    System.out.println(((PazientePresenter)obj).getFullName());

            }
        });
    }

    public void updateList(JList list, List<PazientePresenter> objs){
        DefaultListModel listModel = (DefaultListModel)list.getModel();
        listModel.clear();
        for(int i=0; i<objs.size(); i++)
        {
            listModel.addElement((PazientePresenter)objs.get(i));
        }
    }

     */
}
