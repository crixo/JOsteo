/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportView.java
 *
 * Created on Nov 25, 2010, 8:49:31 AM
 */

package josteo.views;
import java.text.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.util.*;
import java.io.*;
import java.util.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.apache.commons.io.*;

import josteo.infrastructure.UI.*;
import josteo.infrastructure.helpers.*;
import org.xml.sax.SAXException;

/**
 *
 * @author cristiano
 */
public class ExportView extends ViewBase implements josteo.infrastructure.UI.IView {

    String _choosertitle;
    String _exportFolder;

    /** Creates new form ImportView */
    public ExportView() {
        initComponents();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnExport = new javax.swing.JButton();
        btnSelectExportFolder = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblExportFolder = new javax.swing.JLabel();
        lbl = new javax.swing.JLabel();

        btnExport.setText("Create DB Backup Script");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnSelectExportFolder.setText("Change Export Folder");
        btnSelectExportFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectExportFolderActionPerformed(evt);
            }
        });

        lblExportFolder.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lblExportFolder.setText("jLabel1");

        lbl.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        lbl.setText("Export Folder");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblExportFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 441, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbl))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(lbl)
                .add(4, 4, 4)
                .add(lblExportFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(btnSelectExportFolder))
                    .add(layout.createSequentialGroup()
                        .add(191, 191, 191)
                        .add(btnExport)))
                .addContainerGap(341, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(31, 31, 31)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnSelectExportFolder)
                .add(43, 43, 43)
                .add(btnExport)
                .addContainerGap(286, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
        String msg="";
        try{
            msg = this.MakeBackup();
        }catch(Exception exc){
            msg = exc.getMessage();
        }finally{
            JOptionPane.showMessageDialog(this, msg);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnSelectExportFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectExportFolderActionPerformed
        // TODO add your handling code here:
        int result;

        JFileChooser chooser = josteo.views.UI.Helpers.CreateFileChooser(this, _choosertitle, JFileChooser.DIRECTORIES_ONLY);

        _exportFolder = chooser.getSelectedFile().getAbsolutePath();
        ConfigHelper.getInstance().getProperties().setProperty("db.exportFolder",_exportFolder);
        ConfigHelper.getInstance().getProperties().StoreProperties();
        this.btnExport.setVisible(true);
        this.lblExportFolder.setText(_exportFolder);
    }//GEN-LAST:event_btnSelectExportFolderActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnSelectExportFolder;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbl;
    private javax.swing.JLabel lblExportFolder;
    // End of variables declaration//GEN-END:variables

    public void Init(){
        String exportFolder = ConfigHelper.getInstance().getProperties().getProperty("db.exportFolder");
        _exportFolder = exportFolder==null? "" : exportFolder;
        if(!_exportFolder.isEmpty()){
            File exportDir = new File(_exportFolder);
            if(!exportDir.exists())
                this._exportFolder = "";
        }
        System.out.println("exportFolder:"+_exportFolder);
        this.btnExport.setVisible(!_exportFolder.isEmpty());
        this.lblExportFolder.setText(_exportFolder.isEmpty()? "--not set--" : _exportFolder);
    }


  


  private String MakeBackup() throws java.io.IOException{
        String dump = String.format("%1$smysqldump --host=%2$s --port=%3$s --user=%4$s --password=%5$s --compact --complete-insert --extended-insert --skip-comments --skip-triggers %6$s"
                ,ConfigHelper.getInstance().getProperties().getProperty("db.binFolder")
                ,ConfigHelper.getInstance().getProperties().getProperty("db.host")
                ,ConfigHelper.getInstance().getProperties().getProperty("db.port")
                ,ConfigHelper.getInstance().getProperties().getProperty("db.user")
                ,ConfigHelper.getInstance().getProperties().getProperty("db.pwd")
                ,ConfigHelper.getInstance().getProperties().getProperty("db.dbname")
                ,_exportFolder
                ,Calendar.getInstance()
                );
        // > %7$s/%6$s_dump_%8$tY-%8$tm-%8$td-%8$tH-%8$tM-%8$tS.sql

        System.out.println(dump);
        
        Process run = Runtime.getRuntime().exec(dump);

        InputStream in = run.getInputStream();

        BufferedReader br = new BufferedReader(new InputStreamReader(in));


        //java.lang.StringBuffer temp = new java.lang.StringBuffer();
        String exportFileName = String.format("%1$s_dump_%2$tY-%2$tm-%2$td-%2$tH-%2$tM-%2$tS.sql", ConfigHelper.getInstance().getProperties().getProperty("db.dbname"), Calendar.getInstance());
        String exportFilePath = FilenameUtils.concat(_exportFolder, exportFileName);
        PrintWriter pw = new PrintWriter(new FileWriter(exportFilePath));

        int count;
        int BUFFER = 1024;

        char[] cbuf = new char[BUFFER];

        while ((count = br.read(cbuf, 0, BUFFER)) != -1) {

            //temp.append(cbuf, 0, count);
            pw.write(cbuf, 0, count);

        }

        pw.close();


        return "Export File created at " + exportFilePath;

    }

}
