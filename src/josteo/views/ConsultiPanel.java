/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConsultiPanel.java
 *
 * Created on Nov 12, 2010, 6:35:07 PM
 */

package josteo.views;

import josteo.views.UI.ConsultoAdvancedTableFormat;
import josteo.infrastructure.UI.PanelListBase;
import josteo.application.IPazienteSelectedListner;
import java.util.*;
import javax.swing.event.*;
import ca.odell.glazedlists.swing.*;
import ca.odell.glazedlists.*;
import ca.odell.glazedlists.gui.*;
import java.beans.PropertyChangeEvent;

import josteo.viewmodels.*;
import josteo.model.paziente.*;
import josteo.application.*;
import josteo.infrastructure.helpers.*;
import josteo.infrastructure.DomainBase.*;
import josteo.infrastructure.UI.*;
import josteo.views.UI.*;

import javax.swing.text.*;
import javax.swing.*;
import java.awt.event.*;
/**
 *
 * @author cristiano
 */
public class ConsultiPanel extends PanelListBase<Consulto>  implements IPazienteSelectedListner {

    //private josteo.viewmodels.ConsultiPresenter _presenter;

    /** Creates new form ConsultiPanel */
    public ConsultiPanel() {
        super();
        
        initComponents();

        //josteo.application.ApplicationState.getInstance().addPazienteChangedListner("ConsultiView");

        this._presenter = new josteo.viewmodels.ConsultiPresenter();

        ApplicationState.getInstance().addPazienteSelectedListener(this);

        this.jTable1.setRowHeight(32);

        this.taDescrizione.getDocument().addDocumentListener(new UpdateListener());

        this.dcData.addPropertyChangeListener(new MyPropertyChangeListener());

        EsamiPanel esamiPanel = new EsamiPanel();
        AnamnesiProssimePanel anamnesiProssimePanel = new AnamnesiProssimePanel();
        ValutazioniPanel valutazioniPanel = new ValutazioniPanel();
        TrattamentiPanel trattamentiPanel = new TrattamentiPanel();


        this.jTabbedPane1.addTab("Esami", esamiPanel);
        this.jTabbedPane1.addTab("Anamnesi Prossime", anamnesiProssimePanel);
        this.jTabbedPane1.addTab("Trattamenti", trattamentiPanel);
        this.jTabbedPane1.addTab("Valutazioni", valutazioniPanel);

        // Disable the tab
        //jTabbedPane1.setEnabledAt(0, false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        spConsulti = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        pnConsulto = new javax.swing.JPanel();
        pnConsultoData = new javax.swing.JPanel();
        lblData = new javax.swing.JLabel();
        dcData = new com.toedter.calendar.JDateChooser();
        pnSubmit = new javax.swing.JPanel();
        btnReset = new javax.swing.JButton();
        btnStore = new javax.swing.JButton();
        pnDescrizione = new javax.swing.JPanel();
        lblDescr = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescrizione = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        jSplitPane1.setDividerLocation(400);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Descrizione"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spConsulti.setViewportView(jTable1);

        jSplitPane1.setLeftComponent(spConsulti);

        pnConsulto.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Consulto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 2, 13))); // NOI18N
        pnConsulto.setPreferredSize(new java.awt.Dimension(840, 310));

        lblData.setText("Data");

        org.jdesktop.layout.GroupLayout pnConsultoDataLayout = new org.jdesktop.layout.GroupLayout(pnConsultoData);
        pnConsultoData.setLayout(pnConsultoDataLayout);
        pnConsultoDataLayout.setHorizontalGroup(
            pnConsultoDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(lblData)
            .add(dcData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 203, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        pnConsultoDataLayout.setVerticalGroup(
            pnConsultoDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnConsultoDataLayout.createSequentialGroup()
                .add(lblData)
                .add(0, 0, 0)
                .add(dcData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnStore.setText("Store");
        btnStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStoreActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnSubmitLayout = new org.jdesktop.layout.GroupLayout(pnSubmit);
        pnSubmit.setLayout(pnSubmitLayout);
        pnSubmitLayout.setHorizontalGroup(
            pnSubmitLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnSubmitLayout.createSequentialGroup()
                .addContainerGap()
                .add(btnReset)
                .add(32, 32, 32)
                .add(btnStore)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnSubmitLayout.setVerticalGroup(
            pnSubmitLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnSubmitLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(btnStore)
                .add(btnReset))
        );

        lblDescr.setText("Descrizione");

        taDescrizione.setColumns(2);
        taDescrizione.setRows(2);
        taDescrizione.setWrapStyleWord(true);
        jScrollPane1.setViewportView(taDescrizione);

        org.jdesktop.layout.GroupLayout pnDescrizioneLayout = new org.jdesktop.layout.GroupLayout(pnDescrizione);
        pnDescrizione.setLayout(pnDescrizioneLayout);
        pnDescrizioneLayout.setHorizontalGroup(
            pnDescrizioneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(lblDescr)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 471, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        pnDescrizioneLayout.setVerticalGroup(
            pnDescrizioneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnDescrizioneLayout.createSequentialGroup()
                .add(lblDescr)
                .add(0, 0, 0)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout pnConsultoLayout = new org.jdesktop.layout.GroupLayout(pnConsulto);
        pnConsulto.setLayout(pnConsultoLayout);
        pnConsultoLayout.setHorizontalGroup(
            pnConsultoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnConsultoLayout.createSequentialGroup()
                .add(pnConsultoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnConsultoLayout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(pnConsultoData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnConsultoLayout.createSequentialGroup()
                        .add(110, 110, 110)
                        .add(pnSubmit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 443, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnConsultoLayout.setVerticalGroup(
            pnConsultoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnConsultoLayout.createSequentialGroup()
                .add(pnConsultoData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(pnDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(pnSubmit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(126, 126, 126))
        );

        jSplitPane1.setRightComponent(pnConsulto);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 869, Short.MAX_VALUE)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 869, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 336, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        reset();
}//GEN-LAST:event_btnResetActionPerformed

    private void btnStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStoreActionPerformed
        // TODO add your handling code here:
        store();
}//GEN-LAST:event_btnStoreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnStore;
    private com.toedter.calendar.JDateChooser dcData;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblDescr;
    private javax.swing.JPanel pnConsulto;
    private javax.swing.JPanel pnConsultoData;
    private javax.swing.JPanel pnDescrizione;
    private javax.swing.JPanel pnSubmit;
    private javax.swing.JScrollPane spConsulti;
    private javax.swing.JTextArea taDescrizione;
    // End of variables declaration//GEN-END:variables

    public void PazienteSelected( Paziente paziente ){
        System.out.println("ConsultiPanel->PazienteSelected" + (paziente==null? "null" : paziente.getCognome().toString()));
        this.Init();
    }

    public void Init(){
        this._items = new SortedList( this._presenter.getItems(), new DateComparator());
        gridConfig(new ConsultoAdvancedTableFormat());



        this._presenter.Load();
        reset();

        jTabbedPane1.setVisible(false);

        this.addTabLisntener();
    }

    @Override
    protected void jTable1_SelectionChanged(ListSelectionEvent evt){
        super.jTable1_SelectionChanged(evt);

        //System.out.println("ConsultiPanel.jTable1_SelectionChanged -> selItem:"+this._presenter.getSelected().get_Key().toString());
        boolean bConsultoSelected = ConsultiPanel.this._presenter.getSelected()!=null;
        jTabbedPane1.setVisible(bConsultoSelected);
    }


    @Override
    protected JTable getTable(){
        return this.jTable1;
    }

    @Override
    protected void bindUI(){
        Consulto item = (Consulto)this._presenter.getSelected();
        if(item==null)
            item = (Consulto)this._presenter.getNewItem();

        ApplicationState.getInstance().setSelectedConsulto(item);

        jSplitPane1.setDividerLocation(0.5);


        System.out.println("bindUI -> selItem:"+item.get_Key().toString());
        if(item==null) return;
        boolean bBind = true;
        if(this._isDirty){
            int i = JOptionPane.showConfirmDialog(null,"Vuoi sovrascrivere i dati nel form con la nuova selezione?","Dati non salvati", JOptionPane.YES_NO_OPTION);
            bBind = (i==0);
        }
        if(bBind){
            this.taDescrizione.setText((this._presenter.getSelected()!=null)? item.get_ProblemaIniziale() : "");
            this.dcData.setDate((this._presenter.getSelected()!=null)? item.get_Data() : new Date());

            this._isDirty = false;
            System.out.println("bindUI done");
        }

    }

    @Override
    protected boolean bindToPresenter(){
        Consulto itemTmp = new Consulto(0, this.dcData.getDate(), this.taDescrizione.getText());
        List<BrokenRule> brokenRules = itemTmp.GetBrokenRules();
        if(brokenRules.size()>0){
            List<String> errors = new ArrayList<String>();
            for(BrokenRule br : brokenRules)
                errors.add(br.get_Message());

            JOptionPane.showMessageDialog(this, josteo.infrastructure.helpers.StringHelper.join(errors,"\n"));
            return false;
        }


        Consulto item = this._presenter.getSelected()==null? (Consulto)this._presenter.getNewItem() : (Consulto)this._presenter.getSelected();
        System.out.println("bindToPresenter:" + item.get_Key());
        item.set_Data(itemTmp.get_Data());
        item.set_ProblemaIniziale(itemTmp.get_ProblemaIniziale());
        return true;
    }


    class DateComparator implements Comparator{
        public int compare(Object obj1, Object obj2){
            //parameter are of type Object, so we have to downcast it to Employee objects
            Date dt1 = ( (Consulto) obj1 ).get_Data();
            Date dt2 = ( (Consulto) obj2 ).get_Data();
            //uses compareTo method of String class to compare names of the employee
            return dt1.compareTo(dt2);
        }
    }

}
